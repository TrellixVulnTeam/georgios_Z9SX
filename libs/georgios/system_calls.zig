// Generated by scripts/codegen/generate_system_calls.py

const georgios = @import("georgios.zig");

pub fn print_string(s: []const u8) callconv(.Inline) void {
    asm volatile ("int $100" ::
        [syscall_number] "{eax}" (@as(u32, 0)),
        [arg1] "{ebx}" (@ptrToInt(&s)),
        );
}

pub fn yield() callconv(.Inline) void {
    asm volatile ("int $100" ::
        [syscall_number] "{eax}" (@as(u32, 2)),
        );
}

pub fn exit(status: u8) callconv(.Inline) noreturn {
    asm volatile ("int $100" ::
        [syscall_number] "{eax}" (@as(u32, 3)),
        [arg1] "{ebx}" (status),
        );
    unreachable;
}

pub fn exec(info: *const georgios.ProcessInfo) callconv(.Inline) bool {
    var failure: bool = undefined;
    asm volatile ("int $100" ::
        [syscall_number] "{eax}" (@as(u32, 4)),
        [arg1] "{ebx}" (info),
        [arg2] "{ecx}" (@ptrToInt(&failure)),
        );
    return failure;
}

pub fn get_key() callconv(.Inline) georgios.keyboard.Event {
    var key: georgios.keyboard.Event = undefined;
    asm volatile ("int $100" ::
        [syscall_number] "{eax}" (@as(u32, 5)),
        [arg1] "{ebx}" (@ptrToInt(&key)),
        );
    return key;
}

pub fn next_dir_entry(iter: *georgios.DirEntry) callconv(.Inline) bool {
    var rv: bool = undefined;
    asm volatile ("int $100" ::
        [syscall_number] "{eax}" (@as(u32, 6)),
        [arg1] "{ebx}" (iter),
        [arg2] "{ecx}" (@ptrToInt(&rv)),
        );
    return rv;
}

pub fn print_hex(value: u32) callconv(.Inline) void {
    asm volatile ("int $100" ::
        [syscall_number] "{eax}" (@as(u32, 7)),
        [arg1] "{ebx}" (value),
        );
}
